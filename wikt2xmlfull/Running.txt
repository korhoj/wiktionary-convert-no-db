You need to first compile the program in Eclipse, see Build.txt
The example scripts for compiling are for Windows, but Linux could also be used
Linux with a desktop GUI (window manager) is needed for converting the output into StarDict or dictd
compatible file. I use a virtual Ubuntu image in VMware WS. You can also use another virtualizer such
as VirtualBox, or a machine running Linux.

Download one of the supported Wiktionary article dumps:

English, Finnish, Norwegian, Swedish

The completed dumps are listed at https://dumps.wikimedia.org/backup-index.html
Search for the Wiktionary dump you want, e.g. search for "enwiktionary" for the English Wiktionary dump
It's currently (@20221201) listed like this:
  2022-11-21 21:53:44 enwiktionary: Dump complete
    Where "enwiktionary" is a link to https://dumps.wikimedia.org/enwiktionary/20221120/
However, instead of the aforementioned link, you really should use one of the mirrors,
so you won't strain the default servers, and downloading is also probably faster.
I'm currently using a Swedish one:
  https://mirror.accum.se/mirror/wikimedia.org/dumps/
  For this mirror, one needs to search for the subdirectory of the wanted Wiktionary, e.g. "enwiktionary/"
  and click it to open the list of the (about five) latest dumps, and select the latest (complete) one.
  E.g. https://mirror.accum.se/mirror/wikimedia.org/dumps/enwiktionary/20221120/
Download the bzip2 archive for the Wikt you want, e.g. enwiktionary-yyyymmdd-pages-articles.xml.bz2
  A real link example: https://mirror.accum.se/mirror/wikimedia.org/dumps/enwiktionary/20221120/enwiktionary-20221120-pages-articles.xml.bz2
You can also download the "latest" one from e.g. 
 https://dumps.wikimedia.org/enwiktionary/latest/enwiktionary-latest-pages-articles.xml.bz2
but I prefer to have the directory and unarchived file name show the edition (yyyymmdd) in it. The sample
cmd script assumes such a naming scheme.

Extract the bz2 file into a subdirectory. I use 7-Zip. You don't need the bz2 file after extracting it.

A. COMPILING THE ENGLISH WIKTIONARY, WITH ENTRIES FOR ALL LANGUAGES

Change EDITION to match with the Wiktionary edition you have downloaded in
StripNamespaces ALL.cmd.
Run StripNamespaces ALL.cmd. I like to do it via going to cmd.exe.
It prints progress every 10 000 entries.
Stripping the English Wiktionary takes long even on a fast computer. Takes currently
(2016-11) about 20 mins. Stripping the English entries is slower at first than after about
150 000 entries. There are currently about 4 960 000 entries!

Running the ReadStripped program uses a language specific script which calls a
general script common to all languages. (SD in the script names == StarDict)
E.g.:

1) ReadStripped SD en-ALL.cmd
  Process the English Wiktionary, all languages
2) ReadStripped SD en-en.cmd
  Process the English Wiktionary, English only
--> the scripts above call automatically a general script:
3) ReadStripped SD ALL.cmd

The MEM and/or STCK variables in the ReadStripped SD ALL.cmd script file have been set as
-Xmx2600M and -Xss400M which should suffice for one pass. The reason for restarts is indeed
that not so much memory is required. Each restart continues processing where the previous
run left off.

Change EDITION to match with the Wiktionary edition you have downloaded in e.g.
ReadStripped SD en-ALL.cmd and run it.

B. COMPILING A WIKTIONARY OF ANOTHER LANGUAGE

There are one or two sample script files for each supported language. They really only differ in having
different language specific variables set. I use the Finnish Wiktionary as an example:

Change EDITION in "StripNamespaces fiwiktionary.cmd" to match with the Wiktionary edition you have downloaded.

Run StripNamespaces fiwiktionary.cmd. It doesn't take many minutes on a fast computer.

Change EDITION to match with the Wiktionary edition you have downloaded, in either

1) ReadStripped SD fi-ALL.cmd
  Process the Finnish Wiktionary, all languages
or
2) ReadStripped SD fi-fi.cmd
  Process the Finnish Wiktionary, Finnish only

Then run the script you changed.

C. UPDATING LANGUAGES SUPPORTED BY ReadStripped

When you export the runnable JAR in Eclipse, the *.csv files in src/ get packaged
in the JAR. They are CSV files containing the language codes (unique abbroviations) and names
used in Wiktionaries of various languages.   

While running, ReadStripped reads in, based on the parameters, one of the CSV files.

The program rejects any unknown language names and outputs them into "new language codes.csv".
You can check that file and insert any new languages into the CSV you used.

If you don't want entries of some languages to be included, you can remove them from your
copy of the CSV file you used. Just don't commit it :) E.g. I don't need entries for various
Asian languages, since I can't even read their scripts.

N.b. this has nothing to do with which language's Wiktionaries the program supports, which
is currently hard coded in the program.

All Wiktionaries have entries for numerous languages. Just that e.g. the English
Wiktionary has the definitions of the entries in the English language.

D. COMBINING THE OUTPUT FILES

I perform the steps in D and E in Linux running Ubuntu 16.04 LTS. I run it inside VMware Workstation.

You need to have dos2unix installed. If not:

sudo apt install dos2unix

Copy conv2unix-en-ALL.sh and sort-en-ALL.sh to Linux. I do it using the shared folders feature of VMware Workstation.

By default, conv2unix-en-ALL.sh processes wikt-en-ALL-yyyy-mm-dd, where yyyy-mm-dd is
the current date. Change this if necessary by editing with e.g. vi.

Run conv2unix-en-ALL.sh. The script produces wikt-en-ALL-unsorted.txt which needs to be sorted.

Run sort-en-ALL.sh. It produces wikt-en-ALL-yyyy-mm-dd.txt.

E. PARSING THE ENTRIES AND CREATING STARDICT FILES

The Ubuntu repo Stardict package in 16.04 LTS doesn't work since it doesn't support multiple lines having the
same entry name.

You can try to download and install (dpkg -i for the deb)
https://sourceforge.net/projects/stardict-4/files/3.0.6.2/stardict_3.0.6-2-1_all.deb/download

It didn't install in my Ubuntu 64b 16.04 LTS. It needs libsigc++-2.0-0c2a and I have libsigc++-2.0.0-v5.

I was however able to compile the stardict-tools part of the package. Download
https://sourceforge.net/projects/stardict-4/files/3.0.6.2/stardict-3.0.6.2-github-2.tar.xz/download
 (there is also this link in https://stardict-4.sourceforge.net: https://sourceforge.net/projects/stardict-4/files/3.0.1/stardict-tools-3.0.1.tar.bz2/download)

cd ~/Downloads
tar xfj stardict-3.0.6.tar.bz2
cd stardict-3.0.6/

Install libraries needed for building:
sudo apt install automake
sudo apt install libgtk2.0-dev
sudo apt install libxml2-dev
(sudo apt install libglib2.0-dev - installed already as dependency of libtk2.0-dev)
(sudo apt install zlib1g-dev - installed already as dependency of libtk2.0-dev)
sudo apt install libmysqlclient-dev

Also install dictzip, which is used to produce the .dict.dz file:

sudo apt install dictzip

./autogen.sh
./configure --disable-dict
  This tells make we want to compile only the stardict-tools portion of the code
  2021-Apr-05: stardict-4 tools doesn't support this param anymore, just run ./configure
make

cd tools/src
./stardict-editor
In the default Compile tab, press Browse and select the sorted file, wikt-en-ALL-yyyy-mm-dd.txt
Press Compile. The window is greyed out until processing is ready.
The program says "Done!" if the conversion worked. It gives warnings for some lines but that should be ok.

The conversion process produces files like:

wikt-en-ALL-yyyy-mm-dd.dict.dz
  The dictd and Stardict compatible dictionary file
wikt-en-ALL-yyyy-mm-dd.idx
  The index file needed by Stardict and dictd
wikt-en-ALL-yyyy-mm-dd.ifo
  Description file, can be edited in a text editor

An example:
  
~/Downloads/stardict-tools-3.0.2/src/example.ifo:
  StarDict's dict ifo file
  version=2.4.2
  wordcount=100
  idxfilesize=100
  bookname=example
  author=the author name
  email=author@email
  website=this dictionary's project website link
  description=convert to StarDict by...
  date=2003.05.10
  sametypesequence=m

Change the generated ifo file, e.g. wikt-en-ALL-yyyy-mm-dd.ifo, to look something like this:

StarDict's dict ifo file
version=2.4.2
wordcount=6128515
idxfilesize=122996950
bookname=wikt-en-ALL-2018-10-03
author=Wiktionary volunteers. Converted by Joel Korhonen
email=stardict-korhoj@outlook.com
website=https://dictinfo.com
description=Stardict format, English Wiktionary, English only, v.2018-Oct-03 based on entries from 2018-Oct-01
date=2018.10.03
sametypesequence=m

You may copy wikt-en-ALL-yyyy-mm-dd.dict.dz and wikt-en-ALL-yyyy-mm-dd.idx to e.g. your phone and use it with a Stardict compatible
GUI such as Colordict, or if you have installed the Stardict GUI in your PC, you can use the file with it.

F. CREATING AND INSTALLING A DICTD COMPATIBLE ARCHIVE

Step D. needs to be performed first.

Perform the following steps in Linux.

Install dictd and dictfmt if they are not installed:

sudo apt install dictd dictfmt

Run conv2unix-en-ALL.sh. The script produces wikt-en-ALL-unsorted.txt which needs to be sorted.

Run	join-dupls-dictfmt-en-ALL.cmd in Windows
  Produces wikt-en-ALL-dictfmt-dupls-joined.txt. Uses JoinDefinitions.jar
  
    toformat.txt - an example in F.O.L.D.O.C. format
	\n's should be replaced by real Unix-linefeeds (real \n's) + tab (\t)
	  sed 's/\\n/\n\t/g' > sed-test.txt < headi-nodupls.txt

cp pd-header.txt wikt-en-ALL-yyyy-mm-dd-dict.txt
  This joins a copyright header, public domain + CC-SA-BY in this case
  This could be done by JoinDefinitions.jar already
cat wikt-en-ALL-dictfmt-dupls-joined.txt | tee -a wikt-en-ALL-yyyy-mm-dd-dict.txt > /dev/null

N.b. the next step overwrites any .dz file created in step E, e.g. wikt-en-ALL-yyyy-mm-dd.dict.dz
Run dictfmt which creates .dict and .index for dictd by running one of the dictfmt scripts, e.g.:

dictfmt-en-ALL.sh
dictfmt-en-eb.sh
dictfmt-Western.sh
dictfmt-Western_Greek_Slavonic.sh
dictfmt-sq-ALL.sh

Or create a new script like this and run it:

dictfmt -f --utf8 --allchars wikt-en-ALL-yyyy-mm-dd -u https://dictinfo.com -s wikt-en-ALL-yyyy-mm-dd < wikt-en-ALL-yyyy-mm-dd-dict.txt
	    -f: FILE  is  formatted  with  the headwords starting in column 0, with the definition
            indented at least one space (or tab character) on  subsequent  lines.   The  third
            line starting in column 0 is taken as the first headword , and the first two lines
            starting in column 0 are treated as part of  the  00-database-info  header.   This
            option was written to format the F.O.L.D.O.C.

/Downloads/stardict_3.0.6/tools/src/stardict-verify wikt-en-ALL.ifo
  Run this if you have done step E and want to verify the dictionary files. The ifo isn't needed for dictd as such
dictzip wikt-en-ALL-yyyy-mm-dd.dict
  produces the .dict.dz file. N.b. it overwrites any existing one such as one created in step E
sudo cp -vi wikt-en-ALL-yyyy-mm-dd.dict.dz /usr/share/dictd/
sudo cp -vi wikt-en-ALL-yyyy-mm-dd.index /usr/share/dictd/
dictdconfig -l
  lists current dictionary entries. It should now show your new dictionary, e.g.:
  database wikt-en-ALL-2018-05-15
  {
   data  /usr/share/dictd/wikt-en-ALL-2018-05-15.dict.dz
   index /usr/share/dictd/wikt-en-ALL-2018-05-15.index
  }
sudo dictdconfig -w
  updates /var/lib/dictd/db.list
sudo service dictd restart
dictdconfig -l
  confirm the new dictionary is installed
dict -i wikt-en-ALL-yyyy-mm-dd
  Confirm that the header info shows OK. The copyright from pd-header.txt should be in the last paragraph
dict Linux
  test looking up a word from the new dictionary